/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-07-25 07:09:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.StudyRoom;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class StudyRoomMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1468241066457L));
    _jspx_dependants.put("jar:file:/C:/sistproject/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/StudyProject/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>지도 검색</title>\r\n");
      out.write("</head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0\" />\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://bootswatch.com/paper/bootstrap.min.css\" >\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://bootswatch.com/paper/bootstrap.css\" >\r\n");
      out.write("<script type=\"text/javascript\" src=\"../OpenStudy/js/HuskyEZCreator.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"ajax.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://apis.daum.net/maps/maps3.js?apikey=850448c69975031c4b91c77e0342ba63\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t         \r\n");
      out.write("\t     \tfunction inputmap() \r\n");
      out.write("\t     \t{\r\n");
      out.write("\t\t       /*  <label id=\"latlng\" hidden=\"\"></label>\r\n");
      out.write("\t\t        <label id=\"lating1\" hidden=\"\"></label> */\r\n");
      out.write("\t     \t\topener.document.getElementById(\"p_id\").value = \"latlng\";\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t\t\t\t//변수 설정 및 최초 위치 설정\r\n");
      out.write("\t            var map;\r\n");
      out.write("\t            var marker = '';\r\n");
      out.write("\t            var position = new daum.maps.LatLng(37.5668260, 126.978656);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#map\").ready(function() {\r\n");
      out.write("\t\t\t\t\t//검색창에 엔터 입력시 좌표 검색\r\n");
      out.write("\t                $(\"#txtAddress\").keydown(function(e) {\r\n");
      out.write("\t                    if (e.keyCode == 13) {\r\n");
      out.write("\t                        Search();\r\n");
      out.write("\t                    }\r\n");
      out.write("\t                });\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//지도 초기화\r\n");
      out.write("\t                map = new daum.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t                    center: position,\r\n");
      out.write("\t                    level: 4,\r\n");
      out.write("\t                    mapTypeId: daum.maps.MapTypeId.ROADMAP\r\n");
      out.write("\t                });\r\n");
      out.write("\t\r\n");
      out.write("\t/*                marker = new daum.maps.Marker({\r\n");
      out.write("\t                    position: position\r\n");
      out.write("\t                });\r\n");
      out.write("\t\r\n");
      out.write("\t                marker.setMap(map)\r\n");
      out.write("\t*/\r\n");
      out.write("\t\t\t\t\t//지도상의 위치 클릭시 클릭한 위치의 좌표 확인\r\n");
      out.write("\t                daum.maps.event.addListener(map, \"click\", function(e) {\r\n");
      out.write("\t\t\t\t\t\t//기존에 설정된 마커 삭제\r\n");
      out.write("\t                    if (marker != '') {\r\n");
      out.write("\t                        marker.setMap(null);\r\n");
      out.write("\t                    }\r\n");
      out.write("\t                    //temp에 새로 클릭된 좌표 입력\r\n");
      out.write("\t                    var lat = e.latLng.getLat();\r\n");
      out.write("\t                    var lng = e.latLng.getLng();\r\n");
      out.write("\t\t\t\t\t\tvar temp = new daum.maps.LatLng(lat, lng);\r\n");
      out.write("\t\t\t\t\t\t//좌표 출력\r\n");
      out.write("\t\t\t\t\t\t/* $(\"#latlng\").html(\"동경 \" + lat.toString().substr(0, 10) + \", 북위 \" + lng.toString().substr(0, 10)); */\r\n");
      out.write("\t                    $(\"#latlng\").html(lat.toString().substr(0, 10));\r\n");
      out.write("\t\t\t\t\t\t$(\"#latlng1\").html(lng.toString().substr(0, 10));\r\n");
      out.write("\t\t\t\t\t\topener.document.getElementById(\"p_id\").value = lat;\r\n");
      out.write("\t\t\t\t\t\topener.document.getElementById(\"t_id\").value = lng;\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t/* alert(lng);\r\n");
      out.write("\t\t\t\t\t\talert(lat); */\r\n");
      out.write("\t\t\t\t\t\t//temp에 입력된 좌표값을 중심으로 지도 이동\r\n");
      out.write("\t                    map.panTo(temp);\r\n");
      out.write("\t\t\t\t\t\t//temp에 입력된 좌표값에 마커 설정\r\n");
      out.write("\t                    marker = new daum.maps.Marker({\r\n");
      out.write("\t                        position: temp\r\n");
      out.write("\t                    });\r\n");
      out.write("\t                    marker.setMap(map);\r\n");
      out.write("\t                });\r\n");
      out.write("\t            });\r\n");
      out.write("\t\r\n");
      out.write("\t            function Search() {\r\n");
      out.write("\t                var query = $(\"#txtAddress\").val();\r\n");
      out.write("\t                $(\"#txtAddress\").val('');\r\n");
      out.write("\t                getPoint(query);\r\n");
      out.write("\t            }\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t\t//주소->좌표로 변환해주는 api 사용\r\n");
      out.write("\t            function getPoint(query) {\r\n");
      out.write("\t                var oScript = document.createElement(\"script\");\r\n");
      out.write("\t                oScript.type = \"text/javascript\";\r\n");
      out.write("\t                oScript.charset = \"utf-8\";\r\n");
      out.write("\t                oScript.src = \"http://apis.daum.net/local/geo/addr2coord?apikey=d82c75b3a6b33cfad136796fbe876e68a518b478&output=json&callback=pongSearch&q=\" + encodeURI(query);\r\n");
      out.write("\t                document.getElementsByTagName(\"head\")[0].appendChild(oScript);\r\n");
      out.write("\t            }\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//좌표 변환 후 해당 좌표를 이용해 콜백(클릭시와 동일한 동작)\r\n");
      out.write("\t            function pongSearch(data) {\r\n");
      out.write("\t                marker = '';\r\n");
      out.write("\t                if (data.channel.item.length == 0) {\r\n");
      out.write("\t                    alert(\"결과가 없습니다.\");\r\n");
      out.write("\t                } else {\r\n");
      out.write("\t                    if (marker != '') {\r\n");
      out.write("\t                        marker.setMap(null);\r\n");
      out.write("\t                    }\r\n");
      out.write("\t                    var temp = new daum.maps.LatLng(data.channel.item[0].lat, data.channel.item[0].lng);\r\n");
      out.write("\t                    $(\"#latlng\").html((data.channel.item[0].lat).toString().substring(0, 10) + \", \" + (data.channel.item[0].lng).toString().substring(0, 10));\r\n");
      out.write("\t                    map.panTo(temp);\r\n");
      out.write("\t                    marker = new daum.maps.Marker({\r\n");
      out.write("\t                        position: temp\r\n");
      out.write("\t                    });\r\n");
      out.write("\t                    marker.setMap(map);\r\n");
      out.write("\t                }\r\n");
      out.write("\t            }\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfunction inputmap()\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\twindow.open(\"about:blank\",\"_self\").close();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t        </script>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t    <div class=\"form-group\"> \r\n");
      out.write("\t\t    <span class=\"input-group-btn\">\r\n");
      out.write("\t\t        <input id =\"txtAddress\" class=\"form-control\" type=\"text\" >\r\n");
      out.write("\t\t        <button type=\"button\" class=\"btn btn-success btn-sm\" onclick=\"Search();\">주소찾기</button><i class=\"fa fa-edit spaceLeft\"></i>\r\n");
      out.write("\t\t    </span>\r\n");
      out.write("\t        </div>\r\n");
      out.write("       \t</div>\r\n");
      out.write("    </div>\r\n");
      out.write("        <br>\r\n");
      out.write("        <div>\r\n");
      out.write("        <form id=\"frm\" class=\"frm\">\r\n");
      out.write("\t        <label hidden=\"\">좌표 : </label>\r\n");
      out.write("\t        <!-- <label id=\"latlng\" ></label>\r\n");
      out.write("\t        <label id=\"latlng1\" ></label> -->\r\n");
      out.write("\t    </form>\r\n");
      out.write("\t    </div>\r\n");
      out.write("        \t<div id =\"map\" style=\"width : 100%; height:350px\">\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t    <br>\r\n");
      out.write("\t    <div class=\"col-xs-10\"></div>\r\n");
      out.write("\t    <div>\r\n");
      out.write("\t    \t<button class=\"btn btn-default\" type=\"button\" id=\"map2\" name=\"map2\" onclick=\"inputmap()\">닫기</button>\r\n");
      out.write("\t    </div>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
